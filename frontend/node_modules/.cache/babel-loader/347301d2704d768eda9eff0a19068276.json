{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ali Kone\\\\OneDrive\\\\ALKHAF\\\\projects\\\\tradedashboard\\\\frontend\\\\src\\\\LineChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport Plotly from 'plotly.js-basic-dist';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LineChart = ({\n  data\n}) => {\n  _s();\n  useEffect(() => {\n    drawPlot();\n  }, [data]);\n  const drawPlot = () => {\n    if (!data) return; // Skip drawing if data is not available\n\n    const colors = ['#FF0000',\n    // Pure red\n    '#FFFF00',\n    // Pure yellow\n    '#00FF00',\n    // Pure green\n    '#0000FF',\n    // Pure blue\n    '#FF00FF',\n    // Pure magenta\n    '#FF6347',\n    // Tomato\n    '#00FFFF',\n    // Aqua\n    '#FFA500',\n    // Orange\n    '#800080',\n    // Purple\n    '#40E0D0' // Turquoise\n    ];\n    const lineStyles = ['solid',\n    // Solid line\n    'dashed',\n    // Dashed line\n    'dotted',\n    // Dotted line\n    'dashdot',\n    // Alternating dashes and dots\n    'longdashdotdot',\n    // Alternating long dashes and double dots\n    'shortdash' // Short dashed line\n    ];\n    const transformedData = [];\n    const countries = Object.keys(data);\n    countries.forEach((country, index) => {\n      const importData = data[country].import;\n      const exportData = data[country].export;\n      const importTrace = {\n        x: Object.keys(importData),\n        y: Object.values(importData),\n        type: 'scatter',\n        mode: 'lines+markers',\n        name: `${country} - Import`,\n        line: {\n          color: colors[index % colors.length],\n          dash: lineStyles[index % lineStyles.length]\n        }\n      };\n      const exportTrace = {\n        x: Object.keys(exportData),\n        y: Object.values(exportData),\n        type: 'scatter',\n        mode: 'lines+markers',\n        name: `${country} - Export`,\n        line: {\n          color: colors[(index + 1) % colors.length],\n          dash: lineStyles[(index + 1) % lineStyles.length]\n        }\n      };\n      transformedData.push(importTrace, exportTrace);\n      transformedData.push({\n        x: [],\n        y: [],\n        mode: 'none',\n        marker: {\n          opacity: 0\n        },\n        name: '',\n        showlegend: false\n      });\n    });\n    const layout = {\n      title: {\n        text: 'Import/Export Data',\n        font: {\n          size: 24\n        },\n        y: 0.87\n      },\n      xaxis: {\n        title: 'Year'\n      },\n      yaxis: {\n        title: 'Value'\n      },\n      hovermode: 'closest',\n      legend: {\n        orientation: 'h',\n        yanchor: 'bottom',\n        y: 1.05,\n        xanchor: 'right',\n        x: 1\n      },\n      margin: {\n        t: 100,\n        b: 150\n      },\n      width: 1200,\n      height: 800\n    };\n    Plotly.newPlot('line-chart', transformedData, layout);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"line-chart\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 10\n  }, this);\n};\n_s(LineChart, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = LineChart;\nexport default LineChart;\nvar _c;\n$RefreshReg$(_c, \"LineChart\");","map":{"version":3,"names":["React","useEffect","Plotly","jsxDEV","_jsxDEV","LineChart","data","_s","drawPlot","colors","lineStyles","transformedData","countries","Object","keys","forEach","country","index","importData","import","exportData","export","importTrace","x","y","values","type","mode","name","line","color","length","dash","exportTrace","push","marker","opacity","showlegend","layout","title","text","font","size","xaxis","yaxis","hovermode","legend","orientation","yanchor","xanchor","margin","t","b","width","height","newPlot","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Ali Kone/OneDrive/ALKHAF/projects/tradedashboard/frontend/src/LineChart.js"],"sourcesContent":["import React, { useEffect } from 'react';\r\nimport Plotly from 'plotly.js-basic-dist';\r\n\r\nconst LineChart = ({ data }) => {\r\n  useEffect(() => {\r\n    drawPlot();\r\n  }, [data]);\r\n\r\n  const drawPlot = () => {\r\n    if (!data) return; // Skip drawing if data is not available\r\n\r\n    const colors = [\r\n      '#FF0000', // Pure red\r\n      '#FFFF00', // Pure yellow\r\n      '#00FF00', // Pure green\r\n      '#0000FF', // Pure blue\r\n      '#FF00FF', // Pure magenta\r\n      '#FF6347', // Tomato\r\n      '#00FFFF', // Aqua\r\n      '#FFA500', // Orange\r\n      '#800080', // Purple\r\n      '#40E0D0'  // Turquoise\r\n    ];\r\n\r\n    const lineStyles = [\r\n      'solid', // Solid line\r\n      'dashed', // Dashed line\r\n      'dotted', // Dotted line\r\n      'dashdot', // Alternating dashes and dots\r\n      'longdashdotdot', // Alternating long dashes and double dots\r\n      'shortdash' // Short dashed line\r\n    ];\r\n\r\n    const transformedData = [];\r\n    const countries = Object.keys(data);\r\n\r\n    countries.forEach((country, index) => {\r\n      const importData = data[country].import;\r\n      const exportData = data[country].export;\r\n\r\n      const importTrace = {\r\n        x: Object.keys(importData),\r\n        y: Object.values(importData),\r\n        type: 'scatter',\r\n        mode: 'lines+markers',\r\n        name: `${country} - Import`,\r\n        line: {\r\n          color: colors[index % colors.length],\r\n          dash: lineStyles[index % lineStyles.length]\r\n        }\r\n      };\r\n\r\n      const exportTrace = {\r\n        x: Object.keys(exportData),\r\n        y: Object.values(exportData),\r\n        type: 'scatter',\r\n        mode: 'lines+markers',\r\n        name: `${country} - Export`,\r\n        line: {\r\n          color: colors[(index + 1) % colors.length],\r\n          dash: lineStyles[(index + 1) % lineStyles.length]\r\n        }\r\n      };\r\n\r\n      transformedData.push(importTrace, exportTrace);\r\n      transformedData.push({\r\n        x: [],\r\n        y: [],\r\n        mode: 'none',\r\n        marker: { opacity: 0 },\r\n        name: '',\r\n        showlegend: false\r\n      });\r\n    });\r\n\r\n    const layout = {\r\n      title: {\r\n        text: 'Import/Export Data',\r\n        font: {\r\n          size: 24\r\n        },\r\n        y: 0.87\r\n      },\r\n      xaxis: {\r\n        title: 'Year'\r\n      },\r\n      yaxis: {\r\n        title: 'Value'\r\n      },\r\n      hovermode: 'closest',\r\n      legend: {\r\n        orientation: 'h',\r\n        yanchor: 'bottom',\r\n        y: 1.05,\r\n        xanchor: 'right',\r\n        x: 1\r\n      },\r\n      margin: {\r\n        t: 100,\r\n        b: 150\r\n      },\r\n      width: 1200,\r\n      height: 800\r\n    };\r\n\r\n    Plotly.newPlot('line-chart', transformedData, layout);\r\n  };\r\n\r\n  return <div id=\"line-chart\"></div>;\r\n};\r\n\r\nexport default LineChart;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}