{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ali Kone\\\\OneDrive\\\\ALKHAF\\\\projects\\\\tradedashboard\\\\frontend\\\\src\\\\Plot.js\";\nimport React from 'react';\nimport Plotly from 'plotly.js-basic-dist';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Plot extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.drawPlot = () => {\n      const {\n        data,\n        selectedCountries,\n        selectedYears\n      } = this.props;\n\n      // Define a custom color scale for vibrant colors\n      const colors = ['#FF0000',\n      // Pure red\n      '#FFFF00',\n      // Pure yellow\n      '#00FF00',\n      // Pure green\n      '#0000FF',\n      // Pure blue\n      '#FF00FF',\n      // Pure magenta\n      '#FF6347',\n      // Tomato\n      '#00FFFF',\n      // Aqua\n      '#FFA500',\n      // Orange\n      '#800080',\n      // Purple\n      '#40E0D0' // Turquoise\n      ];\n\n      // Define line styles\n      const lineStyles = ['solid',\n      // Solid line\n      'dashed',\n      // Dashed line\n      'dotted',\n      // Dotted line\n      'dashdot',\n      // Alternating dashes and dots\n      'longdashdotdot',\n      // Alternating long dashes and double dots\n      'shortdash' // Short dashed line\n      ];\n\n      // Initialize arrays to store import and export data for each country\n      const importTraces = [];\n      const exportTraces = [];\n\n      // Iterate over selected countries\n      selectedCountries.forEach((country, index) => {\n        // Extract import and export data for the selected years\n        const importValues = selectedYears.map(year => {\n          var _data$country, _data$country$import;\n          return ((_data$country = data[country]) === null || _data$country === void 0 ? void 0 : (_data$country$import = _data$country.import) === null || _data$country$import === void 0 ? void 0 : _data$country$import[year]) || null;\n        });\n        const exportValues = selectedYears.map(year => {\n          var _data$country2, _data$country2$export;\n          return ((_data$country2 = data[country]) === null || _data$country2 === void 0 ? void 0 : (_data$country2$export = _data$country2.export) === null || _data$country2$export === void 0 ? void 0 : _data$country2$export[year]) || null;\n        });\n\n        // Construct line chart traces for import and export\n        importTraces.push({\n          x: selectedYears,\n          y: importValues,\n          type: 'scatter',\n          mode: 'lines+markers',\n          name: `${country} - Import`,\n          line: {\n            color: colors[index % colors.length],\n            dash: lineStyles[index % lineStyles.length]\n          }\n        });\n        exportTraces.push({\n          x: selectedYears,\n          y: exportValues,\n          type: 'scatter',\n          mode: 'lines+markers',\n          name: `${country} - Export`,\n          line: {\n            color: colors[index % colors.length],\n            dash: lineStyles[index % lineStyles.length]\n          }\n        });\n      });\n\n      // Define bar chart data for import and export\n      const filteredData = {};\n      selectedCountries.forEach(country => {\n        filteredData[country] = {\n          import: {},\n          export: {}\n        };\n        selectedYears.forEach(year => {\n          var _data$country3, _data$country3$import, _data$country4, _data$country4$export;\n          filteredData[country].import[year] = ((_data$country3 = data[country]) === null || _data$country3 === void 0 ? void 0 : (_data$country3$import = _data$country3.import) === null || _data$country3$import === void 0 ? void 0 : _data$country3$import[year]) || null;\n          filteredData[country].export[year] = ((_data$country4 = data[country]) === null || _data$country4 === void 0 ? void 0 : (_data$country4$export = _data$country4.export) === null || _data$country4$export === void 0 ? void 0 : _data$country4$export[year]) || null;\n        });\n      });\n      const importBarData = selectedCountries.map(country => ({\n        x: selectedYears,\n        y: Object.values(filteredData[country].import),\n        type: 'bar',\n        name: `${country} - Import`\n      }));\n      const exportBarData = selectedCountries.map(country => ({\n        x: selectedYears,\n        y: Object.values(filteredData[country].export),\n        type: 'bar',\n        name: `${country} - Export`\n      }));\n      const layout = {\n        title: 'Import/Export Data',\n        xaxis: {\n          title: 'Year'\n        },\n        yaxis: {\n          title: 'Value'\n        },\n        barmode: 'group',\n        width: 1200,\n        height: 800\n      };\n      Plotly.newPlot('plot', [...importTraces, ...exportTraces, ...importBarData, ...exportBarData], layout);\n    };\n  }\n  componentDidMount() {\n    this.drawPlot();\n  }\n  componentDidUpdate(prevProps) {\n    if (this.props.data !== prevProps.data) {\n      this.drawPlot();\n    }\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"plot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 12\n    }, this);\n  }\n}\nexport default Plot;","map":{"version":3,"names":["React","Plotly","jsxDEV","_jsxDEV","Plot","Component","constructor","args","drawPlot","data","selectedCountries","selectedYears","props","colors","lineStyles","importTraces","exportTraces","forEach","country","index","importValues","map","year","_data$country","_data$country$import","import","exportValues","_data$country2","_data$country2$export","export","push","x","y","type","mode","name","line","color","length","dash","filteredData","_data$country3","_data$country3$import","_data$country4","_data$country4$export","importBarData","Object","values","exportBarData","layout","title","xaxis","yaxis","barmode","width","height","newPlot","componentDidMount","componentDidUpdate","prevProps","render","id","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["C:/Users/Ali Kone/OneDrive/ALKHAF/projects/tradedashboard/frontend/src/Plot.js"],"sourcesContent":["import React from 'react';\r\nimport Plotly from 'plotly.js-basic-dist';\r\n\r\nclass Plot extends React.Component {\r\n  componentDidMount() {\r\n    this.drawPlot();\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props.data !== prevProps.data) {\r\n      this.drawPlot();\r\n    }\r\n  }\r\n  drawPlot = () => {\r\n    const { data, selectedCountries, selectedYears } = this.props;\r\n\r\n    // Define a custom color scale for vibrant colors\r\n    const colors = [\r\n        '#FF0000', // Pure red\r\n        '#FFFF00', // Pure yellow\r\n        '#00FF00', // Pure green\r\n        '#0000FF', // Pure blue\r\n        '#FF00FF', // Pure magenta\r\n        '#FF6347', // Tomato\r\n        '#00FFFF', // Aqua\r\n        '#FFA500', // Orange\r\n        '#800080', // Purple\r\n        '#40E0D0'  // Turquoise\r\n    ];\r\n\r\n    // Define line styles\r\n    const lineStyles = [\r\n        'solid', // Solid line\r\n        'dashed', // Dashed line\r\n        'dotted', // Dotted line\r\n        'dashdot', // Alternating dashes and dots\r\n        'longdashdotdot', // Alternating long dashes and double dots\r\n        'shortdash' // Short dashed line\r\n    ];\r\n\r\n    // Initialize arrays to store import and export data for each country\r\n    const importTraces = [];\r\n    const exportTraces = [];\r\n\r\n    // Iterate over selected countries\r\n    selectedCountries.forEach((country, index) => {\r\n        // Extract import and export data for the selected years\r\n        const importValues = selectedYears.map(year => data[country]?.import?.[year] || null);\r\n        const exportValues = selectedYears.map(year => data[country]?.export?.[year] || null);\r\n\r\n        // Construct line chart traces for import and export\r\n        importTraces.push({\r\n            x: selectedYears,\r\n            y: importValues,\r\n            type: 'scatter',\r\n            mode: 'lines+markers',\r\n            name: `${country} - Import`,\r\n            line: {\r\n                color: colors[index % colors.length],\r\n                dash: lineStyles[index % lineStyles.length]\r\n            }\r\n        });\r\n\r\n        exportTraces.push({\r\n            x: selectedYears,\r\n            y: exportValues,\r\n            type: 'scatter',\r\n            mode: 'lines+markers',\r\n            name: `${country} - Export`,\r\n            line: {\r\n                color: colors[index % colors.length],\r\n                dash: lineStyles[index % lineStyles.length]\r\n            }\r\n        });\r\n    });\r\n\r\n    // Define bar chart data for import and export\r\n    const filteredData = {};\r\n    selectedCountries.forEach(country => {\r\n        filteredData[country] = {\r\n            import: {},\r\n            export: {}\r\n        };\r\n        selectedYears.forEach(year => {\r\n            filteredData[country].import[year] = data[country]?.import?.[year] || null;\r\n            filteredData[country].export[year] = data[country]?.export?.[year] || null;\r\n        });\r\n    });\r\n\r\n    const importBarData = selectedCountries.map(country => ({\r\n        x: selectedYears,\r\n        y: Object.values(filteredData[country].import),\r\n        type: 'bar',\r\n        name: `${country} - Import`\r\n    }));\r\n\r\n    const exportBarData = selectedCountries.map(country => ({\r\n        x: selectedYears,\r\n        y: Object.values(filteredData[country].export),\r\n        type: 'bar',\r\n        name: `${country} - Export`\r\n    }));\r\n\r\n    const layout = {\r\n        title: 'Import/Export Data',\r\n        xaxis: { title: 'Year' },\r\n        yaxis: { title: 'Value' },\r\n        barmode: 'group',\r\n        width: 1200,\r\n        height: 800\r\n    };\r\n\r\n    Plotly.newPlot('plot', [...importTraces, ...exportTraces, ...importBarData, ...exportBarData], layout);\r\n};\r\n\r\n\r\n\r\n\r\n  render() {\r\n    return <div id=\"plot\"></div>;\r\n  }\r\n}\r\n\r\nexport default Plot;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}