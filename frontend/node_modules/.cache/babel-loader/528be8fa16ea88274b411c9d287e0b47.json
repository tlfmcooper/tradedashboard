{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ali Kone\\\\OneDrive\\\\ALKHAF\\\\projects\\\\tradedashboard\\\\frontend\\\\src\\\\LineChart.js\";\n// LineChart.js\n\nimport React, { Component } from 'react';\nimport Plotly from 'plotly.js-basic-dist';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass LineChart extends Component {\n  constructor(...args) {\n    super(...args);\n    this.drawPlot = () => {\n      const {\n        data\n      } = this.props;\n\n      // Define a custom color scale for vibrant colors\n      const colors = ['#FF0000',\n      // Pure red\n      '#FFFF00',\n      // Pure yellow\n      '#00FF00',\n      // Pure green\n      '#0000FF',\n      // Pure blue\n      '#FF00FF',\n      // Pure magenta\n      '#FF6347',\n      // Tomato\n      '#00FFFF',\n      // Aqua\n      '#FFA500',\n      // Orange\n      '#800080',\n      // Purple\n      '#40E0D0' // Turquoise\n      ];\n\n      // Define line styles\n      const lineStyles = ['solid',\n      // Solid line\n      'dashed',\n      // Dashed line\n      'dotted',\n      // Dotted line\n      'dashdot',\n      // Alternating dashes and dots\n      'longdashdotdot',\n      // Alternating long dashes and double dots\n      'shortdash' // Short dashed line\n      ];\n      const transformedData = [];\n      const countries = Object.keys(data);\n      countries.forEach((country, index) => {\n        const importData = data[country].import;\n        const exportData = data[country].export;\n        const importTrace = {\n          x: Object.keys(importData),\n          y: Object.values(importData),\n          type: 'scatter',\n          mode: 'lines+markers',\n          name: `${country} - Import`,\n          line: {\n            color: colors[index % colors.length],\n            // Use a different color for each country\n            dash: lineStyles[index % lineStyles.length] // Use a different line style for each country\n          }\n        };\n        const exportTrace = {\n          x: Object.keys(exportData),\n          y: Object.values(exportData),\n          type: 'scatter',\n          mode: 'lines+markers',\n          name: `${country} - Export`,\n          line: {\n            color: colors[(index + 1) % colors.length],\n            // Use a different color for export\n            dash: lineStyles[(index + 1) % lineStyles.length] // Use a different line style for export\n          }\n        };\n        transformedData.push(importTrace, exportTrace);\n        transformedData.push({\n          // Add an empty trace to create space between charts\n          x: [],\n          y: [],\n          mode: 'none',\n          marker: {\n            opacity: 0\n          },\n          name: '',\n          showlegend: false\n        });\n      });\n      const layout = {\n        title: {\n          text: 'Import/Export Data',\n          font: {\n            size: 24 // Increase the title font size\n          },\n          y: 0.87 // Increase the space between title and chart\n        },\n        xaxis: {\n          title: 'Year'\n        },\n        yaxis: {\n          title: 'Value'\n        },\n        hovermode: 'closest',\n        // Display hover labels closest to the cursor\n        legend: {\n          orientation: 'h',\n          // Horizontal legend\n          yanchor: 'bottom',\n          y: 1.05,\n          // Increase the space between chart and legend\n          xanchor: 'right',\n          x: 1\n        },\n        margin: {\n          // Increase space between countries' charts\n          t: 100,\n          // Top margin\n          b: 150 // Bottom margin\n        },\n        width: 1200,\n        // Increase chart width for higher resolution\n        height: 800 // Increase chart height for higher resolution\n      };\n      Plotly.newPlot('line-chart', transformedData, layout);\n    };\n  }\n  componentDidMount() {\n    this.drawPlot();\n  }\n  componentDidUpdate() {\n    this.drawPlot();\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"line-chart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default LineChart;","map":{"version":3,"names":["React","Component","Plotly","jsxDEV","_jsxDEV","LineChart","constructor","args","drawPlot","data","props","colors","lineStyles","transformedData","countries","Object","keys","forEach","country","index","importData","import","exportData","export","importTrace","x","y","values","type","mode","name","line","color","length","dash","exportTrace","push","marker","opacity","showlegend","layout","title","text","font","size","xaxis","yaxis","hovermode","legend","orientation","yanchor","xanchor","margin","t","b","width","height","newPlot","componentDidMount","componentDidUpdate","render","id","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["C:/Users/Ali Kone/OneDrive/ALKHAF/projects/tradedashboard/frontend/src/LineChart.js"],"sourcesContent":["// LineChart.js\r\n\r\nimport React, { Component } from 'react';\r\nimport Plotly from 'plotly.js-basic-dist';\r\n\r\nclass LineChart extends Component {\r\n  componentDidMount() {\r\n    this.drawPlot();\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.drawPlot();\r\n  }\r\n\r\n  drawPlot = () => {\r\n    const { data } = this.props;\r\n\r\n    // Define a custom color scale for vibrant colors\r\n    const colors = [\r\n      '#FF0000', // Pure red\r\n      '#FFFF00', // Pure yellow\r\n      '#00FF00', // Pure green\r\n      '#0000FF', // Pure blue\r\n      '#FF00FF', // Pure magenta\r\n      '#FF6347', // Tomato\r\n      '#00FFFF', // Aqua\r\n      '#FFA500', // Orange\r\n      '#800080', // Purple\r\n      '#40E0D0'  // Turquoise\r\n    ];\r\n\r\n    // Define line styles\r\n    const lineStyles = [\r\n      'solid', // Solid line\r\n      'dashed', // Dashed line\r\n      'dotted', // Dotted line\r\n      'dashdot', // Alternating dashes and dots\r\n      'longdashdotdot', // Alternating long dashes and double dots\r\n      'shortdash' // Short dashed line\r\n    ];\r\n\r\n    const transformedData = [];\r\n    const countries = Object.keys(data);\r\n\r\n    countries.forEach((country, index) => {\r\n      const importData = data[country].import;\r\n      const exportData = data[country].export;\r\n\r\n      const importTrace = {\r\n        x: Object.keys(importData),\r\n        y: Object.values(importData),\r\n        type: 'scatter',\r\n        mode: 'lines+markers',\r\n        name: `${country} - Import`,\r\n        line: {\r\n          color: colors[index % colors.length], // Use a different color for each country\r\n          dash: lineStyles[index % lineStyles.length] // Use a different line style for each country\r\n        }\r\n      };\r\n\r\n      const exportTrace = {\r\n        x: Object.keys(exportData),\r\n        y: Object.values(exportData),\r\n        type: 'scatter',\r\n        mode: 'lines+markers',\r\n        name: `${country} - Export`,\r\n        line: {\r\n          color: colors[(index + 1) % colors.length], // Use a different color for export\r\n          dash: lineStyles[(index + 1) % lineStyles.length] // Use a different line style for export\r\n        }\r\n      };\r\n\r\n      transformedData.push(importTrace, exportTrace);\r\n      transformedData.push({ // Add an empty trace to create space between charts\r\n        x: [],\r\n        y: [],\r\n        mode: 'none',\r\n        marker: { opacity: 0 },\r\n        name: '',\r\n        showlegend: false\r\n      });\r\n    });\r\n\r\n    const layout = {\r\n      title: {\r\n        text: 'Import/Export Data',\r\n        font: {\r\n          size: 24 // Increase the title font size\r\n        },\r\n        y: 0.87 // Increase the space between title and chart\r\n      },\r\n      xaxis: {\r\n        title: 'Year'\r\n      },\r\n      yaxis: {\r\n        title: 'Value'\r\n      },\r\n      hovermode: 'closest', // Display hover labels closest to the cursor\r\n      legend: {\r\n        orientation: 'h', // Horizontal legend\r\n        yanchor: 'bottom',\r\n        y: 1.05, // Increase the space between chart and legend\r\n        xanchor: 'right',\r\n        x: 1\r\n      },\r\n      margin: { // Increase space between countries' charts\r\n        t: 100, // Top margin\r\n        b: 150 // Bottom margin\r\n      },\r\n      width: 1200, // Increase chart width for higher resolution\r\n      height: 800 // Increase chart height for higher resolution\r\n    };\r\n\r\n    Plotly.newPlot('line-chart', transformedData, layout);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"line-chart\"></div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LineChart;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}