{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ali Kone\\\\OneDrive\\\\ALKHAF\\\\projects\\\\tradedashboard\\\\frontend\\\\src\\\\Plot.js\";\nimport React from 'react';\nimport Plotly from 'plotly.js-basic-dist';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Plot extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.drawPlot = () => {\n      const {\n        data\n      } = this.props;\n\n      // Define a custom color scale for vibrant colors\n      const colors = ['#FF5733',\n      // Red\n      '#FFD633',\n      // Yellow\n      '#33FF6B',\n      // Green\n      '#33B5FF',\n      // Blue\n      '#FF33F3',\n      // Magenta\n      '#FF3388',\n      // Pink\n      '#339CFF',\n      // Cyan\n      '#FF9133',\n      // Orange\n      '#8A33FF',\n      // Purple\n      '#33FFA1' // Turquoise\n      ];\n\n      // Define line styles\n      const lineStyles = ['solid', 'dot', 'dash', 'longdash', 'dashdot', 'longdashdot'];\n      const transformedData = [];\n      const countries = Object.keys(data);\n      countries.forEach((country, index) => {\n        const importData = data[country].import;\n        const exportData = data[country].export;\n        const importTrace = {\n          x: Object.keys(importData),\n          y: Object.values(importData),\n          type: 'scatter',\n          mode: 'lines+markers',\n          name: `${country} - Import`,\n          line: {\n            color: colors[index % colors.length],\n            // Use a different color for each country\n            dash: lineStyles[index % lineStyles.length] // Use a different line style for each country\n          }\n        };\n        const exportTrace = {\n          x: Object.keys(exportData),\n          y: Object.values(exportData),\n          type: 'scatter',\n          mode: 'lines+markers',\n          name: `${country} - Export`,\n          line: {\n            color: colors[(index + 1) % colors.length],\n            // Use a different color for export\n            dash: lineStyles[(index + 1) % lineStyles.length] // Use a different line style for export\n          }\n        };\n        transformedData.push(importTrace, exportTrace);\n        transformedData.push({\n          // Add an empty trace to create space between charts\n          x: [],\n          y: [],\n          mode: 'none',\n          marker: {\n            opacity: 0\n          },\n          name: '',\n          showlegend: false\n        });\n      });\n      const layout = {\n        title: 'Import/Export Data',\n        xaxis: {\n          title: 'Year'\n        },\n        yaxis: {\n          title: 'Value'\n        },\n        hovermode: 'closest',\n        // Display hover labels closest to the cursor\n        legend: {\n          orientation: 'h',\n          // Horizontal legend\n          yanchor: 'bottom',\n          y: 1.02,\n          xanchor: 'right',\n          x: 1\n        },\n        margin: {\n          // Increase space between countries' charts\n          t: 50,\n          // Top margin\n          b: 150 // Bottom margin\n        }\n      };\n      Plotly.newPlot('plot', transformedData, layout);\n    };\n  }\n  componentDidMount() {\n    this.drawPlot();\n  }\n  componentDidUpdate(prevProps) {\n    if (this.props.data !== prevProps.data) {\n      this.drawPlot();\n    }\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"plot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 12\n    }, this);\n  }\n}\nexport default Plot;","map":{"version":3,"names":["React","Plotly","jsxDEV","_jsxDEV","Plot","Component","constructor","args","drawPlot","data","props","colors","lineStyles","transformedData","countries","Object","keys","forEach","country","index","importData","import","exportData","export","importTrace","x","y","values","type","mode","name","line","color","length","dash","exportTrace","push","marker","opacity","showlegend","layout","title","xaxis","yaxis","hovermode","legend","orientation","yanchor","xanchor","margin","t","b","newPlot","componentDidMount","componentDidUpdate","prevProps","render","id","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["C:/Users/Ali Kone/OneDrive/ALKHAF/projects/tradedashboard/frontend/src/Plot.js"],"sourcesContent":["import React from 'react';\r\nimport Plotly from 'plotly.js-basic-dist';\r\n\r\nclass Plot extends React.Component {\r\n  componentDidMount() {\r\n    this.drawPlot();\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props.data !== prevProps.data) {\r\n      this.drawPlot();\r\n    }\r\n  }\r\n  drawPlot = () => {\r\n    const { data } = this.props;\r\n  \r\n    // Define a custom color scale for vibrant colors\r\n    const colors = [\r\n      '#FF5733', // Red\r\n      '#FFD633', // Yellow\r\n      '#33FF6B', // Green\r\n      '#33B5FF', // Blue\r\n      '#FF33F3', // Magenta\r\n      '#FF3388', // Pink\r\n      '#339CFF', // Cyan\r\n      '#FF9133', // Orange\r\n      '#8A33FF', // Purple\r\n      '#33FFA1', // Turquoise\r\n    ];\r\n  \r\n    // Define line styles\r\n    const lineStyles = ['solid', 'dot', 'dash', 'longdash', 'dashdot', 'longdashdot'];\r\n  \r\n    const transformedData = [];\r\n    const countries = Object.keys(data);\r\n  \r\n    countries.forEach((country, index) => {\r\n      const importData = data[country].import;\r\n      const exportData = data[country].export;\r\n  \r\n      const importTrace = {\r\n        x: Object.keys(importData),\r\n        y: Object.values(importData),\r\n        type: 'scatter',\r\n        mode: 'lines+markers',\r\n        name: `${country} - Import`,\r\n        line: {\r\n          color: colors[index % colors.length], // Use a different color for each country\r\n          dash: lineStyles[index % lineStyles.length] // Use a different line style for each country\r\n        }\r\n      };\r\n  \r\n      const exportTrace = {\r\n        x: Object.keys(exportData),\r\n        y: Object.values(exportData),\r\n        type: 'scatter',\r\n        mode: 'lines+markers',\r\n        name: `${country} - Export`,\r\n        line: {\r\n          color: colors[(index + 1) % colors.length], // Use a different color for export\r\n          dash: lineStyles[(index + 1) % lineStyles.length] // Use a different line style for export\r\n        }\r\n      };\r\n  \r\n      transformedData.push(importTrace, exportTrace);\r\n      transformedData.push({ // Add an empty trace to create space between charts\r\n        x: [],\r\n        y: [],\r\n        mode: 'none',\r\n        marker: { opacity: 0 },\r\n        name: '',\r\n        showlegend: false\r\n      });\r\n    });\r\n  \r\n    const layout = {\r\n      title: 'Import/Export Data',\r\n      xaxis: {\r\n        title: 'Year'\r\n      },\r\n      yaxis: {\r\n        title: 'Value'\r\n      },\r\n      hovermode: 'closest', // Display hover labels closest to the cursor\r\n      legend: {\r\n        orientation: 'h', // Horizontal legend\r\n        yanchor: 'bottom',\r\n        y: 1.02,\r\n        xanchor: 'right',\r\n        x: 1\r\n      },\r\n      margin: { // Increase space between countries' charts\r\n        t: 50, // Top margin\r\n        b: 150 // Bottom margin\r\n      }\r\n    };\r\n  \r\n    Plotly.newPlot('plot', transformedData, layout);\r\n  };\r\n  \r\n  \r\n    \r\n\r\n  render() {\r\n    return <div id=\"plot\"></div>;\r\n  }\r\n}\r\n\r\nexport default Plot;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}