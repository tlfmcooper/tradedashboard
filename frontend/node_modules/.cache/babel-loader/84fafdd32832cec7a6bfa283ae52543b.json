{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ali Kone\\\\OneDrive\\\\ALKHAF\\\\projects\\\\tradedashboard\\\\frontend\\\\src\\\\Plot.js\";\nimport React from 'react';\nimport Plotly from 'plotly.js-basic-dist';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Plot extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.drawPlot = () => {\n      const {\n        data,\n        selectedCountries,\n        selectedYears\n      } = this.props;\n\n      // Define a custom color scale for vibrant colors\n      const colors = ['#FF0000',\n      // Pure red\n      '#FFFF00',\n      // Pure yellow\n      '#00FF00',\n      // Pure green\n      '#0000FF',\n      // Pure blue\n      '#FF00FF',\n      // Pure magenta\n      '#FF6347',\n      // Tomato\n      '#00FFFF',\n      // Aqua\n      '#FFA500',\n      // Orange\n      '#800080',\n      // Purple\n      '#40E0D0' // Turquoise\n      ];\n\n      // Define line styles\n      const lineStyles = ['solid',\n      // Solid line\n      'dashed',\n      // Dashed line\n      'dotted',\n      // Dotted line\n      'dashdot',\n      // Alternating dashes and dots\n      'longdashdotdot',\n      // Alternating long dashes and double dots\n      'shortdash' // Short dashed line\n      ];\n\n      // Define line chart data for all countries' import and export\n      const lineChartData = selectedCountries.flatMap((country, index) => [{\n        x: selectedYears,\n        y: Object.values(data[country].import),\n        type: 'scatter',\n        mode: 'lines+markers',\n        name: `${country} - Import`,\n        line: {\n          color: colors[index % colors.length],\n          // Use a different color for each country\n          dash: lineStyles[index % lineStyles.length] // Use a different line style for each country\n        }\n      }, {\n        x: selectedYears,\n        y: Object.values(data[country].export),\n        type: 'scatter',\n        mode: 'lines+markers',\n        name: `${country} - Export`,\n        line: {\n          color: colors[index % colors.length],\n          // Use a different color for each country\n          dash: lineStyles[index % lineStyles.length] // Use a different line style for each country\n        }\n      }]);\n\n      // Define bar chart data for import and export\n      const importBarData = selectedCountries.map(country => ({\n        x: selectedYears,\n        y: Object.values(data[country].import),\n        type: 'bar',\n        name: `${country} - Import`\n      }));\n      const exportBarData = selectedCountries.map(country => ({\n        x: selectedYears,\n        y: Object.values(data[country].export),\n        type: 'bar',\n        name: `${country} - Export`\n      }));\n      const layout = {\n        title: 'Import/Export Data',\n        xaxis: {\n          title: 'Year'\n        },\n        yaxis: {\n          title: 'Value'\n        },\n        barmode: 'group',\n        width: 1200,\n        height: 800\n      };\n      Plotly.newPlot('plot', [...lineChartData, ...importBarData, ...exportBarData], layout);\n    };\n  }\n  componentDidMount() {\n    this.drawPlot();\n  }\n  componentDidUpdate(prevProps) {\n    if (this.props.data !== prevProps.data) {\n      this.drawPlot();\n    }\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"plot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 12\n    }, this);\n  }\n}\nexport default Plot;","map":{"version":3,"names":["React","Plotly","jsxDEV","_jsxDEV","Plot","Component","constructor","args","drawPlot","data","selectedCountries","selectedYears","props","colors","lineStyles","lineChartData","flatMap","country","index","x","y","Object","values","import","type","mode","name","line","color","length","dash","export","importBarData","map","exportBarData","layout","title","xaxis","yaxis","barmode","width","height","newPlot","componentDidMount","componentDidUpdate","prevProps","render","id","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["C:/Users/Ali Kone/OneDrive/ALKHAF/projects/tradedashboard/frontend/src/Plot.js"],"sourcesContent":["import React from 'react';\r\nimport Plotly from 'plotly.js-basic-dist';\r\n\r\nclass Plot extends React.Component {\r\n  componentDidMount() {\r\n    this.drawPlot();\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props.data !== prevProps.data) {\r\n      this.drawPlot();\r\n    }\r\n  }\r\n  drawPlot = () => {\r\n    const { data, selectedCountries, selectedYears } = this.props;\r\n\r\n    // Define a custom color scale for vibrant colors\r\n    const colors = [\r\n        '#FF0000', // Pure red\r\n        '#FFFF00', // Pure yellow\r\n        '#00FF00', // Pure green\r\n        '#0000FF', // Pure blue\r\n        '#FF00FF', // Pure magenta\r\n        '#FF6347', // Tomato\r\n        '#00FFFF', // Aqua\r\n        '#FFA500', // Orange\r\n        '#800080', // Purple\r\n        '#40E0D0'  // Turquoise\r\n    ];\r\n\r\n    // Define line styles\r\n    const lineStyles = [\r\n        'solid', // Solid line\r\n        'dashed', // Dashed line\r\n        'dotted', // Dotted line\r\n        'dashdot', // Alternating dashes and dots\r\n        'longdashdotdot', // Alternating long dashes and double dots\r\n        'shortdash' // Short dashed line\r\n    ];\r\n\r\n    // Define line chart data for all countries' import and export\r\n    const lineChartData = selectedCountries.flatMap((country, index) => [\r\n        {\r\n            x: selectedYears,\r\n            y: Object.values(data[country].import),\r\n            type: 'scatter',\r\n            mode: 'lines+markers',\r\n            name: `${country} - Import`,\r\n            line: {\r\n                color: colors[index % colors.length], // Use a different color for each country\r\n                dash: lineStyles[index % lineStyles.length] // Use a different line style for each country\r\n            }\r\n        },\r\n        {\r\n            x: selectedYears,\r\n            y: Object.values(data[country].export),\r\n            type: 'scatter',\r\n            mode: 'lines+markers',\r\n            name: `${country} - Export`,\r\n            line: {\r\n                color: colors[index % colors.length], // Use a different color for each country\r\n                dash: lineStyles[index % lineStyles.length] // Use a different line style for each country\r\n            }\r\n        }\r\n    ]);\r\n\r\n    // Define bar chart data for import and export\r\n    const importBarData = selectedCountries.map(country => ({\r\n        x: selectedYears,\r\n        y: Object.values(data[country].import),\r\n        type: 'bar',\r\n        name: `${country} - Import`\r\n    }));\r\n\r\n    const exportBarData = selectedCountries.map(country => ({\r\n        x: selectedYears,\r\n        y: Object.values(data[country].export),\r\n        type: 'bar',\r\n        name: `${country} - Export`\r\n    }));\r\n\r\n    const layout = {\r\n        title: 'Import/Export Data',\r\n        xaxis: { title: 'Year' },\r\n        yaxis: { title: 'Value' },\r\n        barmode: 'group',\r\n        width: 1200,\r\n        height: 800\r\n    };\r\n\r\n    Plotly.newPlot('plot', [...lineChartData, ...importBarData, ...exportBarData], layout);\r\n};\r\n\r\n\r\n\r\n  render() {\r\n    return <div id=\"plot\"></div>;\r\n  }\r\n}\r\n\r\nexport default Plot;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}