{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ali Kone\\\\OneDrive\\\\ALKHAF\\\\projects\\\\tradedashboard\\\\frontend\\\\src\\\\Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Plotly from 'plotly.js-basic-dist';\nimport createPlotlyComponent from 'react-plotly.js/factory';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Plot = createPlotlyComponent(Plotly);\n_c = Plot;\nconst Dashboard = ({\n  data\n}) => {\n  _s();\n  const [selectedCountries, setSelectedCountries] = useState(Object.keys(data));\n  const [selectedYears, setSelectedYears] = useState([2015, 2020]);\n  const handleCountryChange = event => {\n    const selectedCountry = event.target.value;\n    if (event.target.checked) {\n      setSelectedCountries([...selectedCountries, selectedCountry]);\n    } else {\n      setSelectedCountries(selectedCountries.filter(country => country !== selectedCountry));\n    }\n  };\n  const handleYearChange = event => {\n    const newValue = parseInt(event.target.value);\n    const updatedYears = [...selectedYears];\n    const index = selectedYears.indexOf(newValue);\n    if (index === -1) {\n      updatedYears.push(newValue);\n    } else {\n      updatedYears.splice(index, 1);\n    }\n    setSelectedYears(updatedYears.sort((a, b) => a - b));\n  };\n  const filteredData = Object.entries(data).filter(([country]) => selectedCountries.includes(country)).map(([country, values]) => ({\n    name: country,\n    import: values.import,\n    export: values.export\n  }));\n  const filteredDataInRange = filteredData.map(country => ({\n    ...country,\n    import: Object.fromEntries(Object.entries(country.import).filter(([year]) => {\n      return parseInt(year) >= selectedYears[0] && parseInt(year) <= selectedYears[1];\n    })),\n    export: Object.fromEntries(Object.entries(country.export).filter(([year]) => {\n      return parseInt(year) >= selectedYears[0] && parseInt(year) <= selectedYears[1];\n    }))\n  }));\n  const importBarData = filteredDataInRange.map(country => ({\n    x: Object.keys(country.import),\n    y: Object.values(country.import),\n    name: `${country.name} - Import`,\n    type: 'bar'\n  }));\n  const exportBarData = filteredDataInRange.map(country => ({\n    x: Object.keys(country.export),\n    y: Object.values(country.export),\n    name: `${country.name} - Export`,\n    type: 'bar'\n  }));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Bar charts of Imports and Exports\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Select Countries\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), Object.keys(data).map(country => /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          value: country,\n          checked: selectedCountries.includes(country),\n          onChange: handleCountryChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }, this), country]\n      }, country, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"yearRange\",\n        children: \"Select Year Range:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"yearRange\",\n        type: \"range\",\n        min: 2015,\n        max: 2020,\n        value: selectedYears,\n        onChange: handleYearChange,\n        step: 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [selectedYears[0], \" - \", selectedYears[1]]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Import Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Plot, {\n        data: importBarData,\n        layout: {\n          barmode: 'group',\n          title: 'Import Data',\n          xaxis: {\n            title: 'Year'\n          },\n          yaxis: {\n            title: 'Value'\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Export Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Plot, {\n        data: exportBarData,\n        layout: {\n          barmode: 'group',\n          title: 'Export Data',\n          xaxis: {\n            title: 'Year'\n          },\n          yaxis: {\n            title: 'Value'\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"bz2qehCl6ewZXE6/UBLpN+gRpRk=\");\n_c2 = Dashboard;\nexport default Dashboard;\nvar _c, _c2;\n$RefreshReg$(_c, \"Plot\");\n$RefreshReg$(_c2, \"Dashboard\");","map":{"version":3,"names":["React","useState","Plotly","createPlotlyComponent","jsxDEV","_jsxDEV","Plot","_c","Dashboard","data","_s","selectedCountries","setSelectedCountries","Object","keys","selectedYears","setSelectedYears","handleCountryChange","event","selectedCountry","target","value","checked","filter","country","handleYearChange","newValue","parseInt","updatedYears","index","indexOf","push","splice","sort","a","b","filteredData","entries","includes","map","values","name","import","export","filteredDataInRange","fromEntries","year","importBarData","x","y","type","exportBarData","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","htmlFor","id","min","max","step","layout","barmode","title","xaxis","yaxis","_c2","$RefreshReg$"],"sources":["C:/Users/Ali Kone/OneDrive/ALKHAF/projects/tradedashboard/frontend/src/Dashboard.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport Plotly from 'plotly.js-basic-dist';\r\nimport createPlotlyComponent from 'react-plotly.js/factory';\r\n\r\nconst Plot = createPlotlyComponent(Plotly);\r\n\r\nconst Dashboard = ({ data }) => {\r\n  const [selectedCountries, setSelectedCountries] = useState(Object.keys(data));\r\n  const [selectedYears, setSelectedYears] = useState([2015, 2020]);\r\n\r\n  const handleCountryChange = (event) => {\r\n    const selectedCountry = event.target.value;\r\n    if (event.target.checked) {\r\n      setSelectedCountries([...selectedCountries, selectedCountry]);\r\n    } else {\r\n      setSelectedCountries(selectedCountries.filter(country => country !== selectedCountry));\r\n    }\r\n  };\r\n\r\n  const handleYearChange = (event) => {\r\n    const newValue = parseInt(event.target.value);\r\n    const updatedYears = [...selectedYears];\r\n    const index = selectedYears.indexOf(newValue);\r\n    \r\n    if (index === -1) {\r\n      updatedYears.push(newValue);\r\n    } else {\r\n      updatedYears.splice(index, 1);\r\n    }\r\n    \r\n    setSelectedYears(updatedYears.sort((a, b) => a - b));\r\n  };\r\n  \r\n\r\n  const filteredData = Object.entries(data)\r\n  .filter(([country]) => selectedCountries.includes(country))\r\n  .map(([country, values]) => ({\r\n    name: country,\r\n    import: values.import,\r\n    export: values.export\r\n  }));\r\n\r\n  const filteredDataInRange = filteredData.map(country => ({\r\n    ...country,\r\n    import: Object.fromEntries(Object.entries(country.import).filter(([year]) => {\r\n      return parseInt(year) >= selectedYears[0] && parseInt(year) <= selectedYears[1];\r\n    })),\r\n    export: Object.fromEntries(Object.entries(country.export).filter(([year]) => {\r\n      return parseInt(year) >= selectedYears[0] && parseInt(year) <= selectedYears[1];\r\n    }))\r\n  }));\r\n\r\n  const importBarData = filteredDataInRange.map(country => ({\r\n    x: Object.keys(country.import),\r\n    y: Object.values(country.import),\r\n    name: `${country.name} - Import`,\r\n    type: 'bar'\r\n  }));\r\n\r\n  const exportBarData = filteredDataInRange.map(country => ({\r\n    x: Object.keys(country.export),\r\n    y: Object.values(country.export),\r\n    name: `${country.name} - Export`,\r\n    type: 'bar'\r\n  }));\r\n\r\n  return (\r\n    <div>\r\n      <h1>Bar charts of Imports and Exports</h1>\r\n      <div>\r\n        <h2>Select Countries</h2>\r\n        {Object.keys(data).map(country => (\r\n          <label key={country}>\r\n            <input\r\n              type=\"checkbox\"\r\n              value={country}\r\n              checked={selectedCountries.includes(country)}\r\n              onChange={handleCountryChange}\r\n            />\r\n            {country}\r\n          </label>\r\n        ))}\r\n      </div>\r\n      <div>\r\n        <label htmlFor=\"yearRange\">Select Year Range:</label>\r\n        <input\r\n          id=\"yearRange\"\r\n          type=\"range\"\r\n          min={2015}\r\n          max={2020}\r\n          value={selectedYears}\r\n          onChange={handleYearChange}\r\n          step={1}\r\n        />\r\n        <span>{selectedYears[0]} - {selectedYears[1]}</span>\r\n      </div>\r\n      <div>\r\n        <h2>Import Data</h2>\r\n        <Plot\r\n          data={importBarData}\r\n          layout={{\r\n            barmode: 'group',\r\n            title: 'Import Data',\r\n            xaxis: { title: 'Year' },\r\n            yaxis: { title: 'Value' }\r\n          }}\r\n        />\r\n      </div>\r\n      <div>\r\n        <h2>Export Data</h2>\r\n        <Plot\r\n          data={exportBarData}\r\n          layout={{\r\n            barmode: 'group',\r\n            title: 'Export Data',\r\n            xaxis: { title: 'Year' },\r\n            yaxis: { title: 'Value' }\r\n          }}\r\n        />\r\n      </div>\r\n      \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}