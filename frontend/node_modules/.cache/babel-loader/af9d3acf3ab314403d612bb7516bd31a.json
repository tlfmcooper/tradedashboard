{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ali Kone\\\\OneDrive\\\\ALKHAF\\\\projects\\\\tradedashboard\\\\frontend\\\\src\\\\Plot.js\";\nimport React from 'react';\nimport Plotly from 'plotly.js-basic-dist';\nimport LineChart from './LineChart';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Plot extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.drawPlot = () => {\n      const {\n        data,\n        selectedCountries,\n        selectedYears\n      } = this.props;\n\n      // Define a custom color scale for vibrant colors\n      const colors = ['#FF0000',\n      // Pure red\n      '#FFFF00',\n      // Pure yellow\n      '#00FF00',\n      // Pure green\n      '#0000FF',\n      // Pure blue\n      '#FF00FF',\n      // Pure magenta\n      '#FF6347',\n      // Tomato\n      '#00FFFF',\n      // Aqua\n      '#FFA500',\n      // Orange\n      '#800080',\n      // Purple\n      '#40E0D0' // Turquoise\n      ];\n\n      // Define line styles\n      const lineStyles = ['solid',\n      // Solid line\n      'dashed',\n      // Dashed line\n      'dotted',\n      // Dotted line\n      'dashdot',\n      // Alternating dashes and dots\n      'longdashdotdot',\n      // Alternating long dashes and double dots\n      'shortdash' // Short dashed line\n      ];\n\n      // Define line chart data for all countries' import and export\n      const lineChartData = Object.keys(data).map((country, index) => ({\n        x: selectedYears,\n        y: Object.values(data[country].import),\n        type: 'scatter',\n        mode: 'lines+markers',\n        name: `${country} - Import`,\n        line: {\n          color: colors[index % colors.length],\n          // Use a different color for each country\n          dash: lineStyles[index % lineStyles.length] // Use a different line style for each country\n        }\n      }), Object.keys(data).map((country, index) => ({\n        x: selectedYears,\n        y: Object.values(data[country].export),\n        type: 'scatter',\n        mode: 'lines+markers',\n        name: `${country} - Export`,\n        line: {\n          color: colors[index % colors.length],\n          // Use a different color for each country\n          dash: lineStyles[index % lineStyles.length] // Use a different line style for each country\n        }\n      })));\n\n      // Filter data based on selected countries and years\n      const filteredData = {};\n      selectedCountries.forEach(country => {\n        filteredData[country] = {\n          import: {},\n          export: {}\n        };\n        selectedYears.forEach(year => {\n          var _data$country, _data$country$import, _data$country2, _data$country2$export;\n          filteredData[country].import[year] = ((_data$country = data[country]) === null || _data$country === void 0 ? void 0 : (_data$country$import = _data$country.import) === null || _data$country$import === void 0 ? void 0 : _data$country$import[year]) || null;\n          filteredData[country].export[year] = ((_data$country2 = data[country]) === null || _data$country2 === void 0 ? void 0 : (_data$country2$export = _data$country2.export) === null || _data$country2$export === void 0 ? void 0 : _data$country2$export[year]) || null;\n        });\n      });\n\n      // Define bar chart data for import and export\n      const importBarData = selectedCountries.map(country => ({\n        x: selectedYears,\n        y: Object.values(filteredData[country].import),\n        type: 'bar',\n        name: `${country} - Import`\n      }));\n      const exportBarData = selectedCountries.map(country => ({\n        x: selectedYears,\n        y: Object.values(filteredData[country].export),\n        type: 'bar',\n        name: `${country} - Export`\n      }));\n      const layout = {\n        title: {\n          text: 'Import/Export Data',\n          font: {\n            size: 24 // Increase the title font size\n          },\n          y: 0.87 // Increase the space between title and chart\n        },\n        xaxis: {\n          title: 'Year'\n        },\n        yaxis: {\n          title: 'Value'\n        },\n        hovermode: 'closest',\n        // Display hover labels closest to the cursor\n        legend: {\n          orientation: 'h',\n          // Horizontal legend\n          yanchor: 'bottom',\n          y: 1.05,\n          // Increase the space between chart and legend\n          xanchor: 'right',\n          x: 1\n        },\n        margin: {\n          // Increase space between countries' charts\n          t: 100,\n          // Top margin\n          b: 150 // Bottom margin\n        },\n        width: 1200,\n        // Increase chart width for higher resolution\n        height: 800 // Increase chart height for higher resolution\n      };\n      Plotly.newPlot('plot', [...lineChartData, ...importBarData, ...exportBarData], layout);\n    };\n  }\n  componentDidMount() {\n    this.drawPlot();\n  }\n  componentDidUpdate(prevProps) {\n    if (this.props.data !== prevProps.data) {\n      this.drawPlot();\n    }\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"plot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 12\n    }, this);\n  }\n}\nexport default Plot;","map":{"version":3,"names":["React","Plotly","LineChart","jsxDEV","_jsxDEV","Plot","Component","constructor","args","drawPlot","data","selectedCountries","selectedYears","props","colors","lineStyles","lineChartData","Object","keys","map","country","index","x","y","values","import","type","mode","name","line","color","length","dash","export","filteredData","forEach","year","_data$country","_data$country$import","_data$country2","_data$country2$export","importBarData","exportBarData","layout","title","text","font","size","xaxis","yaxis","hovermode","legend","orientation","yanchor","xanchor","margin","t","b","width","height","newPlot","componentDidMount","componentDidUpdate","prevProps","render","id","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["C:/Users/Ali Kone/OneDrive/ALKHAF/projects/tradedashboard/frontend/src/Plot.js"],"sourcesContent":["import React from 'react';\r\nimport Plotly from 'plotly.js-basic-dist';\r\nimport LineChart from './LineChart';\r\n\r\nclass Plot extends React.Component {\r\n  componentDidMount() {\r\n    this.drawPlot();\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props.data !== prevProps.data) {\r\n      this.drawPlot();\r\n    }\r\n  }\r\n  drawPlot = () => {\r\n    const { data, selectedCountries, selectedYears } = this.props;\r\n  \r\n    // Define a custom color scale for vibrant colors\r\n    const colors = [\r\n        '#FF0000', // Pure red\r\n        '#FFFF00', // Pure yellow\r\n        '#00FF00', // Pure green\r\n        '#0000FF', // Pure blue\r\n        '#FF00FF', // Pure magenta\r\n        '#FF6347', // Tomato\r\n        '#00FFFF', // Aqua\r\n        '#FFA500', // Orange\r\n        '#800080', // Purple\r\n        '#40E0D0'  // Turquoise\r\n    ];\r\n  \r\n    // Define line styles\r\n    const lineStyles = [\r\n        'solid', // Solid line\r\n        'dashed', // Dashed line\r\n        'dotted', // Dotted line\r\n        'dashdot', // Alternating dashes and dots\r\n        'longdashdotdot', // Alternating long dashes and double dots\r\n        'shortdash' // Short dashed line\r\n    ];\r\n\r\n    // Define line chart data for all countries' import and export\r\n    const lineChartData = Object.keys(data).map((country, index) => ({\r\n        x: selectedYears,\r\n        y: Object.values(data[country].import),\r\n        type: 'scatter',\r\n        mode: 'lines+markers',\r\n        name: `${country} - Import`,\r\n        line: {\r\n            color: colors[index % colors.length], // Use a different color for each country\r\n            dash: lineStyles[index % lineStyles.length] // Use a different line style for each country\r\n        }\r\n    }), Object.keys(data).map((country, index) => ({\r\n        x: selectedYears,\r\n        y: Object.values(data[country].export),\r\n        type: 'scatter',\r\n        mode: 'lines+markers',\r\n        name: `${country} - Export`,\r\n        line: {\r\n            color: colors[index % colors.length], // Use a different color for each country\r\n            dash: lineStyles[index % lineStyles.length] // Use a different line style for each country\r\n        }\r\n    })));\r\n  \r\n    // Filter data based on selected countries and years\r\n    const filteredData = {};\r\n    selectedCountries.forEach(country => {\r\n        filteredData[country] = {\r\n            import: {},\r\n            export: {}\r\n        };\r\n        selectedYears.forEach(year => {\r\n            filteredData[country].import[year] = data[country]?.import?.[year] || null;\r\n            filteredData[country].export[year] = data[country]?.export?.[year] || null;\r\n        });\r\n    });\r\n  \r\n    // Define bar chart data for import and export\r\n    const importBarData = selectedCountries.map(country => ({\r\n        x: selectedYears,\r\n        y: Object.values(filteredData[country].import),\r\n        type: 'bar',\r\n        name: `${country} - Import`\r\n    }));\r\n  \r\n    const exportBarData = selectedCountries.map(country => ({\r\n        x: selectedYears,\r\n        y: Object.values(filteredData[country].export),\r\n        type: 'bar',\r\n        name: `${country} - Export`\r\n    }));\r\n\r\n    const layout = {\r\n        title: {\r\n            text: 'Import/Export Data',\r\n            font: {\r\n                size: 24 // Increase the title font size\r\n            },\r\n            y: 0.87 // Increase the space between title and chart\r\n        },\r\n        xaxis: {\r\n            title: 'Year'\r\n        },\r\n        yaxis: {\r\n            title: 'Value'\r\n        },\r\n        hovermode: 'closest', // Display hover labels closest to the cursor\r\n        legend: {\r\n            orientation: 'h', // Horizontal legend\r\n            yanchor: 'bottom',\r\n            y: 1.05, // Increase the space between chart and legend\r\n            xanchor: 'right',\r\n            x: 1\r\n        },\r\n        margin: { // Increase space between countries' charts\r\n            t: 100, // Top margin\r\n            b: 150 // Bottom margin\r\n        },\r\n        width: 1200, // Increase chart width for higher resolution\r\n        height: 800 // Increase chart height for higher resolution\r\n    };\r\n  \r\n    Plotly.newPlot('plot', [...lineChartData, ...importBarData, ...exportBarData], layout);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n  render() {\r\n    return <div id=\"plot\"></div>;\r\n  }\r\n}\r\n\r\nexport default Plot;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}