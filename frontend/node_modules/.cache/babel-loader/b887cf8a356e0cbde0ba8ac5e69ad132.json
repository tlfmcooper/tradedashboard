{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ali Kone\\\\OneDrive\\\\ALKHAF\\\\projects\\\\tradedashboard\\\\frontend\\\\src\\\\Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Plotly from 'plotly.js-basic-dist';\nimport createPlotlyComponent from 'react-plotly.js/factory';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Plot = createPlotlyComponent(Plotly);\n_c = Plot;\nconst Dashboard = ({\n  data\n}) => {\n  _s();\n  const [selectedCountries, setSelectedCountries] = useState(Object.keys(data));\n  const [selectedYears, setSelectedYears] = useState([2015, 2020]);\n  const handleCountryChange = event => {\n    const selectedCountry = event.target.value;\n    if (event.target.checked) {\n      setSelectedCountries([...selectedCountries, selectedCountry]);\n    } else {\n      setSelectedCountries(selectedCountries.filter(country => country !== selectedCountry));\n    }\n  };\n  const handleYearChange = event => {\n    setSelectedYears(event.target.value);\n  };\n  const filteredData = data.filter(country => selectedCountries.includes(country.name));\n  const filteredDataInRange = filteredData.map(country => ({\n    ...country,\n    import: Object.fromEntries(Object.entries(country.import).filter(([year]) => {\n      return parseInt(year) >= selectedYears[0] && parseInt(year) <= selectedYears[1];\n    })),\n    export: Object.fromEntries(Object.entries(country.export).filter(([year]) => {\n      return parseInt(year) >= selectedYears[0] && parseInt(year) <= selectedYears[1];\n    }))\n  }));\n  const importBarData = filteredDataInRange.map(country => ({\n    x: Object.keys(country.import),\n    y: Object.values(country.import),\n    name: `${country.name} - Import`,\n    type: 'bar'\n  }));\n  const exportBarData = filteredDataInRange.map(country => ({\n    x: Object.keys(country.export),\n    y: Object.values(country.export),\n    name: `${country.name} - Export`,\n    type: 'bar'\n  }));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Import/Export Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"yearRange\",\n        children: \"Select Year Range:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"yearRange\",\n        type: \"range\",\n        min: 2015,\n        max: 2020,\n        value: selectedYears,\n        onChange: handleYearChange,\n        step: 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [selectedYears[0], \" - \", selectedYears[1]]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Import Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Plot, {\n        data: importBarData,\n        layout: {\n          barmode: 'group',\n          title: 'Import Data',\n          xaxis: {\n            title: 'Year'\n          },\n          yaxis: {\n            title: 'Value'\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Export Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Plot, {\n        data: exportBarData,\n        layout: {\n          barmode: 'group',\n          title: 'Export Data',\n          xaxis: {\n            title: 'Year'\n          },\n          yaxis: {\n            title: 'Value'\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Select Countries\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), Object.keys(data).map(country => /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          value: country,\n          checked: selectedCountries.includes(country),\n          onChange: handleCountryChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }, this), country]\n      }, country, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"bz2qehCl6ewZXE6/UBLpN+gRpRk=\");\n_c2 = Dashboard;\nexport default Dashboard;\nvar _c, _c2;\n$RefreshReg$(_c, \"Plot\");\n$RefreshReg$(_c2, \"Dashboard\");","map":{"version":3,"names":["React","useState","Plotly","createPlotlyComponent","jsxDEV","_jsxDEV","Plot","_c","Dashboard","data","_s","selectedCountries","setSelectedCountries","Object","keys","selectedYears","setSelectedYears","handleCountryChange","event","selectedCountry","target","value","checked","filter","country","handleYearChange","filteredData","includes","name","filteredDataInRange","map","import","fromEntries","entries","year","parseInt","export","importBarData","x","y","values","type","exportBarData","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","id","min","max","onChange","step","layout","barmode","title","xaxis","yaxis","_c2","$RefreshReg$"],"sources":["C:/Users/Ali Kone/OneDrive/ALKHAF/projects/tradedashboard/frontend/src/Dashboard.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport Plotly from 'plotly.js-basic-dist';\r\nimport createPlotlyComponent from 'react-plotly.js/factory';\r\n\r\nconst Plot = createPlotlyComponent(Plotly);\r\n\r\nconst Dashboard = ({ data }) => {\r\n  const [selectedCountries, setSelectedCountries] = useState(Object.keys(data));\r\n  const [selectedYears, setSelectedYears] = useState([2015, 2020]);\r\n\r\n  const handleCountryChange = (event) => {\r\n    const selectedCountry = event.target.value;\r\n    if (event.target.checked) {\r\n      setSelectedCountries([...selectedCountries, selectedCountry]);\r\n    } else {\r\n      setSelectedCountries(selectedCountries.filter(country => country !== selectedCountry));\r\n    }\r\n  };\r\n\r\n  const handleYearChange = (event) => {\r\n    setSelectedYears(event.target.value);\r\n  };\r\n\r\n  const filteredData = data.filter(country => selectedCountries.includes(country.name));\r\n  const filteredDataInRange = filteredData.map(country => ({\r\n    ...country,\r\n    import: Object.fromEntries(Object.entries(country.import).filter(([year]) => {\r\n      return parseInt(year) >= selectedYears[0] && parseInt(year) <= selectedYears[1];\r\n    })),\r\n    export: Object.fromEntries(Object.entries(country.export).filter(([year]) => {\r\n      return parseInt(year) >= selectedYears[0] && parseInt(year) <= selectedYears[1];\r\n    }))\r\n  }));\r\n\r\n  const importBarData = filteredDataInRange.map(country => ({\r\n    x: Object.keys(country.import),\r\n    y: Object.values(country.import),\r\n    name: `${country.name} - Import`,\r\n    type: 'bar'\r\n  }));\r\n\r\n  const exportBarData = filteredDataInRange.map(country => ({\r\n    x: Object.keys(country.export),\r\n    y: Object.values(country.export),\r\n    name: `${country.name} - Export`,\r\n    type: 'bar'\r\n  }));\r\n\r\n  return (\r\n    <div>\r\n      <h1>Import/Export Dashboard</h1>\r\n      <div>\r\n        <label htmlFor=\"yearRange\">Select Year Range:</label>\r\n        <input\r\n          id=\"yearRange\"\r\n          type=\"range\"\r\n          min={2015}\r\n          max={2020}\r\n          value={selectedYears}\r\n          onChange={handleYearChange}\r\n          step={1}\r\n        />\r\n        <span>{selectedYears[0]} - {selectedYears[1]}</span>\r\n      </div>\r\n      <div>\r\n        <h2>Import Data</h2>\r\n        <Plot\r\n          data={importBarData}\r\n          layout={{\r\n            barmode: 'group',\r\n            title: 'Import Data',\r\n            xaxis: { title: 'Year' },\r\n            yaxis: { title: 'Value' }\r\n          }}\r\n        />\r\n      </div>\r\n      <div>\r\n        <h2>Export Data</h2>\r\n        <Plot\r\n          data={exportBarData}\r\n          layout={{\r\n            barmode: 'group',\r\n            title: 'Export Data',\r\n            xaxis: { title: 'Year' },\r\n            yaxis: { title: 'Value' }\r\n          }}\r\n        />\r\n      </div>\r\n      <div>\r\n        <h2>Select Countries</h2>\r\n        {Object.keys(data).map(country => (\r\n          <label key={country}>\r\n            <input\r\n              type=\"checkbox\"\r\n              value={country}\r\n              checked={selectedCountries.includes(country)}\r\n              onChange={handleCountryChange}\r\n            />\r\n            {country}\r\n          </label>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}