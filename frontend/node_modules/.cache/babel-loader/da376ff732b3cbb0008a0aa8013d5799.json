{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ali Kone\\\\OneDrive\\\\ALKHAF\\\\projects\\\\tradedashboard\\\\frontend\\\\src\\\\LineChart.js\";\nimport React, { Component } from 'react';\nimport Plotly from 'plotly.js-basic-dist';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass LineChart extends Component {\n  constructor(...args) {\n    super(...args);\n    this.drawPlot = () => {\n      const {\n        data,\n        selectedCountries,\n        selectedYears\n      } = this.props;\n\n      // Define a custom color scale for vibrant colors\n      const colors = ['#FF0000',\n      // Pure red\n      '#FFFF00',\n      // Pure yellow\n      '#00FF00',\n      // Pure green\n      '#0000FF',\n      // Pure blue\n      '#FF00FF',\n      // Pure magenta\n      '#FF6347',\n      // Tomato\n      '#00FFFF',\n      // Aqua\n      '#FFA500',\n      // Orange\n      '#800080',\n      // Purple\n      '#40E0D0' // Turquoise\n      ];\n\n      // Define line styles\n      const lineStyles = ['solid',\n      // Solid line\n      'dashed',\n      // Dashed line\n      'dotted',\n      // Dotted line\n      'dashdot',\n      // Alternating dashes and dots\n      'longdashdotdot',\n      // Alternating long dashes and double dots\n      'shortdash' // Short dashed line\n      ];\n\n      // Filter data based on selected countries and years\n      const filteredData = {};\n      selectedCountries.forEach(country => {\n        filteredData[country] = {\n          import: {},\n          export: {}\n        };\n        selectedYears.forEach(year => {\n          var _data$country, _data$country$import, _data$country2, _data$country2$export;\n          filteredData[country].import[year] = ((_data$country = data[country]) === null || _data$country === void 0 ? void 0 : (_data$country$import = _data$country.import) === null || _data$country$import === void 0 ? void 0 : _data$country$import[year]) || null;\n          filteredData[country].export[year] = ((_data$country2 = data[country]) === null || _data$country2 === void 0 ? void 0 : (_data$country2$export = _data$country2.export) === null || _data$country2$export === void 0 ? void 0 : _data$country2$export[year]) || null;\n        });\n      });\n      const transformedData = [];\n      const countries = Object.keys(filteredData);\n      countries.forEach((country, index) => {\n        const importData = filteredData[country].import;\n        const exportData = filteredData[country].export;\n        const importTrace = {\n          x: Object.keys(importData),\n          y: Object.values(importData),\n          type: 'scatter',\n          mode: 'lines+markers',\n          name: `${country} - Import`,\n          line: {\n            color: colors[index % colors.length],\n            // Use a different color for each country\n            dash: lineStyles[index % lineStyles.length] // Use a different line style for each country\n          }\n        };\n        const exportTrace = {\n          x: Object.keys(exportData),\n          y: Object.values(exportData),\n          type: 'scatter',\n          mode: 'lines+markers',\n          name: `${country} - Export`,\n          line: {\n            color: colors[(index + 1) % colors.length],\n            // Use a different color for export\n            dash: lineStyles[(index + 1) % lineStyles.length] // Use a different line style for export\n          }\n        };\n        transformedData.push(importTrace, exportTrace);\n      });\n\n      // Define bar chart data for import and export\n      const importBarData = selectedCountries.map(country => ({\n        x: selectedYears,\n        y: Object.values(filteredData[country].import),\n        type: 'bar',\n        name: `${country} - Import`\n      }));\n      const exportBarData = selectedCountries.map(country => ({\n        x: selectedYears,\n        y: Object.values(filteredData[country].export),\n        type: 'bar',\n        name: `${country} - Export`\n      }));\n      const allData = [...transformedData, ...importBarData, ...exportBarData];\n      const layout = {\n        title: {\n          text: 'Import/Export Data',\n          font: {\n            size: 24 // Increase the title font size\n          },\n          y: 0.87 // Increase the space between title and chart\n        },\n        xaxis: {\n          title: 'Year'\n        },\n        yaxis: {\n          title: 'Value'\n        },\n        hovermode: 'closest',\n        // Display hover labels closest to the cursor\n        legend: {\n          orientation: 'h',\n          // Horizontal legend\n          yanchor: 'bottom',\n          y: 1.05,\n          // Increase the space between chart and legend\n          xanchor: 'right',\n          x: 1\n        },\n        margin: {\n          // Increase space between countries' charts\n          t: 100,\n          // Top margin\n          b: 150 // Bottom margin\n        },\n        width: 1200,\n        // Increase chart width for higher resolution\n        height: 800 // Increase chart height for higher resolution\n      };\n      Plotly.newPlot('line-chart', allData, layout);\n    };\n  }\n  componentDidMount() {\n    this.drawPlot();\n  }\n  componentDidUpdate(prevProps) {\n    if (this.props.data !== prevProps.data || this.props.selectedCountries !== prevProps.selectedCountries || this.props.selectedYears !== prevProps.selectedYears) {\n      this.drawPlot();\n    }\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"line-chart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 12\n    }, this);\n  }\n}\nexport default LineChart;","map":{"version":3,"names":["React","Component","Plotly","jsxDEV","_jsxDEV","LineChart","constructor","args","drawPlot","data","selectedCountries","selectedYears","props","colors","lineStyles","filteredData","forEach","country","import","export","year","_data$country","_data$country$import","_data$country2","_data$country2$export","transformedData","countries","Object","keys","index","importData","exportData","importTrace","x","y","values","type","mode","name","line","color","length","dash","exportTrace","push","importBarData","map","exportBarData","allData","layout","title","text","font","size","xaxis","yaxis","hovermode","legend","orientation","yanchor","xanchor","margin","t","b","width","height","newPlot","componentDidMount","componentDidUpdate","prevProps","render","id","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["C:/Users/Ali Kone/OneDrive/ALKHAF/projects/tradedashboard/frontend/src/LineChart.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport Plotly from 'plotly.js-basic-dist';\r\n\r\nclass LineChart extends Component {\r\n  componentDidMount() {\r\n    this.drawPlot();\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (\r\n      this.props.data !== prevProps.data ||\r\n      this.props.selectedCountries !== prevProps.selectedCountries ||\r\n      this.props.selectedYears !== prevProps.selectedYears\r\n    ) {\r\n      this.drawPlot();\r\n    }\r\n  }\r\n\r\n  drawPlot = () => {\r\n    const { data, selectedCountries, selectedYears } = this.props;\r\n\r\n    // Define a custom color scale for vibrant colors\r\n    const colors = [\r\n      '#FF0000', // Pure red\r\n      '#FFFF00', // Pure yellow\r\n      '#00FF00', // Pure green\r\n      '#0000FF', // Pure blue\r\n      '#FF00FF', // Pure magenta\r\n      '#FF6347', // Tomato\r\n      '#00FFFF', // Aqua\r\n      '#FFA500', // Orange\r\n      '#800080', // Purple\r\n      '#40E0D0'  // Turquoise\r\n    ];\r\n\r\n    // Define line styles\r\n    const lineStyles = [\r\n      'solid', // Solid line\r\n      'dashed', // Dashed line\r\n      'dotted', // Dotted line\r\n      'dashdot', // Alternating dashes and dots\r\n      'longdashdotdot', // Alternating long dashes and double dots\r\n      'shortdash' // Short dashed line\r\n    ];\r\n\r\n    // Filter data based on selected countries and years\r\n    const filteredData = {};\r\n    selectedCountries.forEach(country => {\r\n        filteredData[country] = {\r\n            import: {},\r\n            export: {}\r\n        };\r\n        selectedYears.forEach(year => {\r\n            filteredData[country].import[year] = data[country]?.import?.[year] || null;\r\n            filteredData[country].export[year] = data[country]?.export?.[year] || null;\r\n        });\r\n    });\r\n\r\n    const transformedData = [];\r\n    const countries = Object.keys(filteredData);\r\n\r\n    countries.forEach((country, index) => {\r\n      const importData = filteredData[country].import;\r\n      const exportData = filteredData[country].export;\r\n\r\n      const importTrace = {\r\n        x: Object.keys(importData),\r\n        y: Object.values(importData),\r\n        type: 'scatter',\r\n        mode: 'lines+markers',\r\n        name: `${country} - Import`,\r\n        line: {\r\n          color: colors[index % colors.length], // Use a different color for each country\r\n          dash: lineStyles[index % lineStyles.length] // Use a different line style for each country\r\n        }\r\n      };\r\n\r\n      const exportTrace = {\r\n        x: Object.keys(exportData),\r\n        y: Object.values(exportData),\r\n        type: 'scatter',\r\n        mode: 'lines+markers',\r\n        name: `${country} - Export`,\r\n        line: {\r\n          color: colors[(index + 1) % colors.length], // Use a different color for export\r\n          dash: lineStyles[(index + 1) % lineStyles.length] // Use a different line style for export\r\n        }\r\n      };\r\n\r\n      transformedData.push(importTrace, exportTrace);\r\n    });\r\n\r\n    // Define bar chart data for import and export\r\n    const importBarData = selectedCountries.map(country => ({\r\n      x: selectedYears,\r\n      y: Object.values(filteredData[country].import),\r\n      type: 'bar',\r\n      name: `${country} - Import`\r\n    }));\r\n\r\n    const exportBarData = selectedCountries.map(country => ({\r\n      x: selectedYears,\r\n      y: Object.values(filteredData[country].export),\r\n      type: 'bar',\r\n      name: `${country} - Export`\r\n    }));\r\n\r\n    const allData = [...transformedData, ...importBarData, ...exportBarData];\r\n\r\n    const layout = {\r\n      title: {\r\n        text: 'Import/Export Data',\r\n        font: {\r\n          size: 24 // Increase the title font size\r\n        },\r\n        y: 0.87 // Increase the space between title and chart\r\n      },\r\n      xaxis: {\r\n        title: 'Year'\r\n      },\r\n      yaxis: {\r\n        title: 'Value'\r\n      },\r\n      hovermode: 'closest', // Display hover labels closest to the cursor\r\n      legend: {\r\n        orientation: 'h', // Horizontal legend\r\n        yanchor: 'bottom',\r\n        y: 1.05, // Increase the space between chart and legend\r\n        xanchor: 'right',\r\n        x: 1\r\n      },\r\n      margin: { // Increase space between countries' charts\r\n        t: 100, // Top margin\r\n        b: 150 // Bottom margin\r\n      },\r\n      width: 1200, // Increase chart width for higher resolution\r\n      height: 800 // Increase chart height for higher resolution\r\n    };\r\n\r\n    Plotly.newPlot('line-chart', allData, layout);\r\n  };\r\n\r\n  render() {\r\n    return <div id=\"line-chart\"></div>;\r\n  }\r\n}\r\n\r\nexport default LineChart;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}