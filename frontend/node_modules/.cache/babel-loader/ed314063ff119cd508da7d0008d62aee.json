{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ali Kone\\\\OneDrive\\\\ALKHAF\\\\projects\\\\tradedashboard\\\\frontend\\\\src\\\\Plot.js\";\nimport React from 'react';\nimport Plotly from 'plotly.js-basic-dist';\nimport LineChart from './LineChart';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Plot extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.drawPlot = () => {\n      const {\n        data,\n        selectedCountries,\n        selectedYears\n      } = this.props;\n\n      // Filter data based on selected countries and years\n      const filteredData = {};\n      selectedCountries.forEach(country => {\n        filteredData[country] = {\n          import: {},\n          export: {}\n        };\n        selectedYears.forEach(year => {\n          var _data$country, _data$country$import, _data$country2, _data$country2$export;\n          filteredData[country].import[year] = ((_data$country = data[country]) === null || _data$country === void 0 ? void 0 : (_data$country$import = _data$country.import) === null || _data$country$import === void 0 ? void 0 : _data$country$import[year]) || null;\n          filteredData[country].export[year] = ((_data$country2 = data[country]) === null || _data$country2 === void 0 ? void 0 : (_data$country2$export = _data$country2.export) === null || _data$country2$export === void 0 ? void 0 : _data$country2$export[year]) || null;\n        });\n      });\n\n      // Define bar chart data for import and export\n      const importBarData = selectedCountries.map(country => ({\n        x: selectedYears,\n        y: Object.values(filteredData[country].import),\n        type: 'bar',\n        name: `${country} - Import`\n      }));\n      const exportBarData = selectedCountries.map(country => ({\n        x: selectedYears,\n        y: Object.values(filteredData[country].export),\n        type: 'bar',\n        name: `${country} - Export`\n      }));\n      Plotly.newPlot('plot', [...importBarData, ...exportBarData]);\n    };\n  }\n  componentDidMount() {\n    this.drawPlot();\n  }\n  componentDidUpdate(prevProps) {\n    if (this.props.data !== prevProps.data) {\n      this.drawPlot();\n    }\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(LineChart, {\n        data: this.props.data\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"plot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }, this);\n  }\n}\nexport default Plot;","map":{"version":3,"names":["React","Plotly","LineChart","jsxDEV","_jsxDEV","Plot","Component","constructor","args","drawPlot","data","selectedCountries","selectedYears","props","filteredData","forEach","country","import","export","year","_data$country","_data$country$import","_data$country2","_data$country2$export","importBarData","map","x","y","Object","values","type","name","exportBarData","newPlot","componentDidMount","componentDidUpdate","prevProps","render","children","fileName","_jsxFileName","lineNumber","columnNumber","id"],"sources":["C:/Users/Ali Kone/OneDrive/ALKHAF/projects/tradedashboard/frontend/src/Plot.js"],"sourcesContent":["import React from 'react';\r\nimport Plotly from 'plotly.js-basic-dist';\r\nimport LineChart from './LineChart';\r\n\r\nclass Plot extends React.Component {\r\n  componentDidMount() {\r\n    this.drawPlot();\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props.data !== prevProps.data) {\r\n      this.drawPlot();\r\n    }\r\n  }\r\n  drawPlot = () => {\r\n    const { data, selectedCountries, selectedYears } = this.props;\r\n    \r\n    // Filter data based on selected countries and years\r\n    const filteredData = {};\r\n    selectedCountries.forEach(country => {\r\n        filteredData[country] = {\r\n            import: {},\r\n            export: {}\r\n        };\r\n        selectedYears.forEach(year => {\r\n            filteredData[country].import[year] = data[country]?.import?.[year] || null;\r\n            filteredData[country].export[year] = data[country]?.export?.[year] || null;\r\n        });\r\n    });\r\n\r\n    // Define bar chart data for import and export\r\n    const importBarData = selectedCountries.map(country => ({\r\n        x: selectedYears,\r\n        y: Object.values(filteredData[country].import),\r\n        type: 'bar',\r\n        name: `${country} - Import`\r\n    }));\r\n  \r\n    const exportBarData = selectedCountries.map(country => ({\r\n        x: selectedYears,\r\n        y: Object.values(filteredData[country].export),\r\n        type: 'bar',\r\n        name: `${country} - Export`\r\n    }));\r\n\r\n    \r\n    Plotly.newPlot('plot', [...importBarData, ...exportBarData]);\r\n}\r\n\r\n\r\n\r\nrender() {\r\n  return (\r\n    <div>\r\n      <LineChart data={this.props.data} />\r\n      <div id=\"plot\"></div>\r\n    </div>\r\n  );\r\n}\r\n}\r\n\r\nexport default Plot;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}