{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ali Kone\\\\OneDrive\\\\ALKHAF\\\\projects\\\\tradedashboard\\\\frontend\\\\src\\\\Plot.js\";\nimport React from 'react';\nimport Plotly from 'plotly.js-basic-dist';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Plot extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.drawPlot = () => {\n      const {\n        data\n      } = this.props;\n\n      // Define colors and line styles\n      const colors = Plotly.d3.scale.category10().range();\n      const lineStyles = ['solid', 'dot', 'dash', 'longdash', 'dashdot', 'longdashdot'];\n      const transformedData = [];\n      const countries = Object.keys(data);\n      countries.forEach((country, index) => {\n        const importData = data[country].import;\n        const exportData = data[country].export;\n        const importTrace = {\n          x: Object.keys(importData),\n          y: Object.values(importData),\n          type: 'scatter',\n          mode: 'lines+markers',\n          name: `${country} - Import`,\n          line: {\n            color: colors[index % colors.length],\n            // Use a different color for each country\n            dash: lineStyles[index % lineStyles.length] // Use a different line style for each country\n          }\n        };\n        const exportTrace = {\n          x: Object.keys(exportData),\n          y: Object.values(exportData),\n          type: 'scatter',\n          mode: 'lines+markers',\n          name: `${country} - Export`,\n          line: {\n            color: colors[index % colors.length],\n            // Use the same color for import and export of the same country\n            dash: lineStyles[index % lineStyles.length] // Use the same line style for import and export of the same country\n          }\n        };\n        transformedData.push(importTrace, exportTrace);\n      });\n      const layout = {\n        title: 'Import/Export Data',\n        xaxis: {\n          title: 'Year'\n        },\n        yaxis: {\n          title: 'Value'\n        },\n        hovermode: 'closest',\n        // Display hover labels closest to the cursor\n        legend: {\n          orientation: 'h',\n          // Horizontal legend\n          yanchor: 'bottom',\n          y: 1.02,\n          xanchor: 'right',\n          x: 1\n        }\n      };\n      Plotly.newPlot('plot', transformedData, layout);\n    };\n  }\n  componentDidMount() {\n    this.drawPlot();\n  }\n  componentDidUpdate(prevProps) {\n    if (this.props.data !== prevProps.data) {\n      this.drawPlot();\n    }\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"plot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 12\n    }, this);\n  }\n}\nexport default Plot;","map":{"version":3,"names":["React","Plotly","jsxDEV","_jsxDEV","Plot","Component","constructor","args","drawPlot","data","props","colors","d3","scale","category10","range","lineStyles","transformedData","countries","Object","keys","forEach","country","index","importData","import","exportData","export","importTrace","x","y","values","type","mode","name","line","color","length","dash","exportTrace","push","layout","title","xaxis","yaxis","hovermode","legend","orientation","yanchor","xanchor","newPlot","componentDidMount","componentDidUpdate","prevProps","render","id","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["C:/Users/Ali Kone/OneDrive/ALKHAF/projects/tradedashboard/frontend/src/Plot.js"],"sourcesContent":["import React from 'react';\r\nimport Plotly from 'plotly.js-basic-dist';\r\n\r\nclass Plot extends React.Component {\r\n  componentDidMount() {\r\n    this.drawPlot();\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props.data !== prevProps.data) {\r\n      this.drawPlot();\r\n    }\r\n  }\r\n\r\n  drawPlot = () => {\r\n    const { data } = this.props;\r\n  \r\n    // Define colors and line styles\r\n    const colors = Plotly.d3.scale.category10().range();\r\n    const lineStyles = ['solid', 'dot', 'dash', 'longdash', 'dashdot', 'longdashdot'];\r\n  \r\n    const transformedData = [];\r\n    const countries = Object.keys(data);\r\n  \r\n    countries.forEach((country, index) => {\r\n      const importData = data[country].import;\r\n      const exportData = data[country].export;\r\n  \r\n      const importTrace = {\r\n        x: Object.keys(importData),\r\n        y: Object.values(importData),\r\n        type: 'scatter',\r\n        mode: 'lines+markers',\r\n        name: `${country} - Import`,\r\n        line: {\r\n          color: colors[index % colors.length], // Use a different color for each country\r\n          dash: lineStyles[index % lineStyles.length] // Use a different line style for each country\r\n        }\r\n      };\r\n  \r\n      const exportTrace = {\r\n        x: Object.keys(exportData),\r\n        y: Object.values(exportData),\r\n        type: 'scatter',\r\n        mode: 'lines+markers',\r\n        name: `${country} - Export`,\r\n        line: {\r\n          color: colors[index % colors.length], // Use the same color for import and export of the same country\r\n          dash: lineStyles[index % lineStyles.length] // Use the same line style for import and export of the same country\r\n        }\r\n      };\r\n  \r\n      transformedData.push(importTrace, exportTrace);\r\n    });\r\n  \r\n    const layout = {\r\n      title: 'Import/Export Data',\r\n      xaxis: {\r\n        title: 'Year'\r\n      },\r\n      yaxis: {\r\n        title: 'Value'\r\n      },\r\n      hovermode: 'closest', // Display hover labels closest to the cursor\r\n      legend: {\r\n        orientation: 'h', // Horizontal legend\r\n        yanchor: 'bottom',\r\n        y: 1.02,\r\n        xanchor: 'right',\r\n        x: 1\r\n      }\r\n    };\r\n  \r\n    Plotly.newPlot('plot', transformedData, layout);\r\n  };\r\n    \r\n\r\n  render() {\r\n    return <div id=\"plot\"></div>;\r\n  }\r\n}\r\n\r\nexport default Plot;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}