{"version":3,"sources":["LineChart.js","Plot.js","api.js","Dashboard.js","App.js","index.js"],"names":["LineChart","Component","constructor","arguments","drawPlot","data","selectedCountries","selectedYears","this","props","colors","lineStyles","transformedData","Object","keys","forEach","country","index","importData","import","exportData","export","importTrace","x","y","values","type","mode","name","concat","line","color","length","dash","exportTrace","push","importBarData","map","year","_data$country","_data$country$import","exportBarData","_data$country2","_data$country2$export","allData","Plotly","newPlot","title","text","font","size","xaxis","yaxis","hovermode","legend","orientation","yanchor","xanchor","margin","t","b","width","height","componentDidMount","componentDidUpdate","prevProps","render","_jsx","id","className","Plot","React","children","API_URL","process","SERVER_URL","createPlotlyComponent","Dashboard","_ref","setSelectedCountries","useState","setSelectedYears","handleCountryChange","event","selectedCountry","target","value","checked","filter","filteredDataInRange","entries","_ref2","includes","_ref3","fromEntries","_ref4","parseInt","_ref5","_jsxs","onChange","htmlFor","min","max","newValue","updatedYears","indexOf","splice","sort","a","step","layout","barmode","App","setData","useEffect","async","result","axios","get","error","console","fetchData","loadData","handleYearChange","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b92b3627.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Plotly from 'plotly.js-basic-dist';\r\n\r\nclass LineChart extends Component {\r\n  componentDidMount() {\r\n    this.drawPlot();\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (\r\n      this.props.data !== prevProps.data ||\r\n      this.props.selectedCountries !== prevProps.selectedCountries ||\r\n      this.props.selectedYears !== prevProps.selectedYears\r\n    ) {\r\n      this.drawPlot();\r\n    }\r\n  }\r\n\r\n  drawPlot = () => {\r\n    const { data, selectedCountries, selectedYears } = this.props;\r\n\r\n    // Define a custom color scale for vibrant colors\r\n    const colors = [\r\n      '#FF0000', // Pure red\r\n      '#FFFF00', // Pure yellow\r\n      '#00FF00', // Pure green\r\n      '#0000FF', // Pure blue\r\n      '#FF00FF', // Pure magenta\r\n      '#FF6347', // Tomato\r\n      '#00FFFF', // Aqua\r\n      '#FFA500', // Orange\r\n      '#800080', // Purple\r\n      '#40E0D0'  // Turquoise\r\n    ];\r\n\r\n    // Define line styles\r\n    const lineStyles = [\r\n      'solid', // Solid line\r\n      'dashed', // Dashed line\r\n      'dotted', // Dotted line\r\n      'dashdot', // Alternating dashes and dots\r\n      'longdashdotdot', // Alternating long dashes and double dots\r\n      'shortdash' // Short dashed line\r\n    ];\r\n\r\n    const transformedData = [];\r\n    const countries = Object.keys(data);\r\n\r\n    countries.forEach((country, index) => {\r\n      const importData = data[country].import;\r\n      const exportData = data[country].export;\r\n\r\n      const importTrace = {\r\n        x: Object.keys(importData),\r\n        y: Object.values(importData),\r\n        type: 'scatter',\r\n        mode: 'lines+markers',\r\n        name: `${country} - Import`,\r\n        line: {\r\n          color: colors[index % colors.length], // Use a different color for each country\r\n          dash: lineStyles[index % lineStyles.length] // Use a different line style for each country\r\n        }\r\n      };\r\n\r\n      const exportTrace = {\r\n        x: Object.keys(exportData),\r\n        y: Object.values(exportData),\r\n        type: 'scatter',\r\n        mode: 'lines+markers',\r\n        name: `${country} - Export`,\r\n        line: {\r\n          color: colors[(index + 1) % colors.length], // Use a different color for export\r\n          dash: lineStyles[(index + 1) % lineStyles.length] // Use a different line style for export\r\n        }\r\n      };\r\n\r\n      transformedData.push(importTrace, exportTrace);\r\n    });\r\n\r\n    // Define bar chart data for import and export\r\n    const importBarData = selectedCountries.map(country => ({\r\n      x: selectedYears,\r\n      y: selectedYears.map(year => data[country]?.import?.[year] || null),\r\n      type: 'bar',\r\n      name: `${country} - Import`\r\n    }));\r\n\r\n    const exportBarData = selectedCountries.map(country => ({\r\n      x: selectedYears,\r\n      y: selectedYears.map(year => data[country]?.export?.[year] || null),\r\n      type: 'bar',\r\n      name: `${country} - Export`\r\n    }));\r\n\r\n    const allData = [...transformedData, ...importBarData, ...exportBarData];\r\n\r\n    const layout = {\r\n      title: {\r\n        text: 'Trend of Import/Export from 2015 to 2020',\r\n        font: {\r\n          size: 24 // Increase the title font size\r\n        },\r\n        y: 0.87 // Increase the space between title and chart\r\n      },\r\n      xaxis: {\r\n        title: 'Year'\r\n      },\r\n      yaxis: {\r\n        title: 'Imports/Exports'\r\n      },\r\n      hovermode: 'closest', // Display hover labels closest to the cursor\r\n      legend: {\r\n        orientation: 'h', // Horizontal legend\r\n        yanchor: 'bottom',\r\n        y: 1.05, // Increase the space between chart and legend\r\n        xanchor: 'right',\r\n        x: 1\r\n      },\r\n      margin: { // Increase space between countries' charts\r\n        t: 100, // Top margin\r\n        b: 150 // Bottom margin\r\n      },\r\n      width: 1200, // Increase chart width for higher resolution\r\n      height: 800 // Increase chart height for higher resolution\r\n    };\r\n\r\n    Plotly.newPlot('line-chart', allData, layout);\r\n  };\r\n\r\n  render() {\r\n    return <div id=\"line-chart\" className=\"chart-container\"></div>;\r\n  }\r\n}\r\n\r\nexport default LineChart;","import React from 'react';\r\nimport LineChart from './LineChart';\r\n\r\nclass Plot extends React.Component {\r\n  render() {\r\n    const { data, selectedCountries, selectedYears } = this.props;\r\n\r\n    return (\r\n      <div>\r\n        <LineChart\r\n          data={data}\r\n          selectedCountries={selectedCountries}\r\n          selectedYears={selectedYears}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Plot;","import axios from 'axios';\r\n\r\nconst API_URL = process.env.SERVER_URL || 'http://localhost:3001/data';\r\n\r\n\r\nexport const fetchData = async () => {\r\n  try {\r\n    const response = await axios.get(API_URL);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching data: ', error);\r\n    return [];\r\n  }\r\n};","import React, { useState } from 'react';\r\nimport Plotly from 'plotly.js-basic-dist';\r\nimport createPlotlyComponent from 'react-plotly.js/factory';\r\n\r\nconst Plot = createPlotlyComponent(Plotly);\r\n\r\nconst Dashboard = ({ data }) => {\r\n  const [selectedCountries, setSelectedCountries] = useState(Object.keys(data));\r\n  const [selectedYears, setSelectedYears] = useState([2015, 2020]);\r\n\r\n  const handleCountryChange = (event) => {\r\n    const selectedCountry = event.target.value;\r\n    if (event.target.checked) {\r\n      setSelectedCountries([...selectedCountries, selectedCountry]);\r\n    } else {\r\n      setSelectedCountries(selectedCountries.filter(country => country !== selectedCountry));\r\n    }\r\n  };\r\n\r\n  const handleYearChange = (event) => {\r\n    const newValue = parseInt(event.target.value);\r\n    const updatedYears = [...selectedYears];\r\n    const index = selectedYears.indexOf(newValue);\r\n    \r\n    if (index === -1) {\r\n      updatedYears.push(newValue);\r\n    } else {\r\n      updatedYears.splice(index, 1);\r\n    }\r\n    \r\n    setSelectedYears(updatedYears.sort((a, b) => a - b));\r\n  };\r\n  \r\n\r\n  const filteredData = Object.entries(data)\r\n  .filter(([country]) => selectedCountries.includes(country))\r\n  .map(([country, values]) => ({\r\n    name: country,\r\n    import: values.import,\r\n    export: values.export\r\n  }));\r\n\r\n  const filteredDataInRange = filteredData.map(country => ({\r\n    ...country,\r\n    import: Object.fromEntries(Object.entries(country.import).filter(([year]) => {\r\n      return parseInt(year) >= selectedYears[0] && parseInt(year) <= selectedYears[1];\r\n    })),\r\n    export: Object.fromEntries(Object.entries(country.export).filter(([year]) => {\r\n      return parseInt(year) >= selectedYears[0] && parseInt(year) <= selectedYears[1];\r\n    }))\r\n  }));\r\n\r\n  const importBarData = filteredDataInRange.map(country => ({\r\n    x: Object.keys(country.import),\r\n    y: Object.values(country.import),\r\n    name: `${country.name} - Import`,\r\n    type: 'bar'\r\n  }));\r\n\r\n  const exportBarData = filteredDataInRange.map(country => ({\r\n    x: Object.keys(country.export),\r\n    y: Object.values(country.export),\r\n    name: `${country.name} - Export`,\r\n    type: 'bar'\r\n  }));\r\n\r\n  return (\r\n    <div>\r\n      <h1>Bar charts of Imports and Exports</h1>\r\n      <div className=\"selection-container\">\r\n        <div className=\"country-selection\">\r\n          <h3>Select Countries</h3>\r\n          {Object.keys(data).map(country => (\r\n            <label key={country}>\r\n              <input type=\"checkbox\" value={country} checked={selectedCountries.includes(country)} onChange={handleCountryChange} />\r\n              {country}\r\n            </label>\r\n          ))}\r\n        </div>\r\n        <div className=\"year-selection\">\r\n          <label htmlFor=\"yearRange\"><strong>Select Year Range:</strong></label>\r\n          <input id=\"yearRange\" type=\"range\" min={2015} max={2020} value={selectedYears} onChange={handleYearChange} step={1} />\r\n          <span>{selectedYears[0]} - {selectedYears[1]}</span>\r\n        </div>\r\n      </div>\r\n      <div className=\"chart-container\">\r\n        <Plot data={importBarData} layout={{ barmode: 'group', title: 'Bar chart of Imports', xaxis: { title: 'Year' }, yaxis: { title: 'Imports' } }} />\r\n      </div>\r\n      <div className=\"chart-container\">\r\n        <Plot data={exportBarData} layout={{ barmode: 'group', title: 'Bar chart of Exports', xaxis: { title: 'Year' }, yaxis: { title: 'Exports' } }} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n","import React, { useEffect, useState } from 'react';\r\nimport Plot from './Plot';\r\nimport { fetchData } from './api';\r\nimport Dashboard from './Dashboard';\r\n\r\nfunction App() {\r\n  const [data, setData] = useState([]);\r\n  const [selectedYears, setSelectedYears] = useState([]);\r\n  const [selectedCountries, setSelectedCountries] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const loadData = async () => {\r\n      const result = await fetchData();\r\n      setData(result);\r\n    };\r\n    loadData();\r\n  }, []);\r\n\r\n  const handleCountryChange = (event) => {\r\n    const selectedCountry = event.target.value;\r\n    if (event.target.checked) {\r\n      setSelectedCountries([...selectedCountries, selectedCountry]);\r\n    } else {\r\n      setSelectedCountries(selectedCountries.filter(country => country !== selectedCountry));\r\n    }\r\n  };\r\n\r\n  const handleYearChange = (event) => {\r\n    const newValue = parseInt(event.target.value);\r\n    const updatedYears = [...selectedYears];\r\n    const index = selectedYears.indexOf(newValue);\r\n\r\n    if (index === -1) {\r\n      updatedYears.push(newValue);\r\n    } else {\r\n      updatedYears.splice(index, 1);\r\n    }\r\n\r\n    setSelectedYears(updatedYears.sort((a, b) => a - b));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>International Trade Dashboard</h1>\r\n\r\n      <Plot\r\n        data={data}\r\n        selectedYears={selectedYears}\r\n        selectedCountries={selectedCountries}\r\n      />\r\n\r\n      <Dashboard\r\n        data={data}\r\n        setSelectedYears={setSelectedYears}\r\n        setSelectedCountries={setSelectedCountries}\r\n        handleCountryChange={handleCountryChange}\r\n        handleYearChange={handleYearChange}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}